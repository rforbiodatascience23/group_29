---
title: "Description of the Data"
format:
  revealjs:
    embed-resources: true
editor: visual
---

## Loading necessary packages

```{r}
#| label: 04-01
#| message: false
library(ggplot2)
library(readr)
library(dplyr)
library(purrr)
library(gridExtra)
library(reshape2)
```

## Loading the data

```{r}
#| label: 04-02
TCGA_aug <- read_tsv("../data/03_dat_aug.tsv", show_col_types = FALSE)
```

## Describing the data

Summary of basic statistics for TCGA_aug (compare them to TCGA_clean to check for integrity after imputation/augmentation).

```{r}
#| label: 04-03

# Summary statistics for numeric variables
# Function to calculate detailed summary for each numeric column
summary_numeric <- function(df) {
  numeric_vars <- names(select(df, where(is.numeric))) # Get names of numeric variables
  map_dfr(numeric_vars, function(var) {
    summary_df <- df %>%
      summarise(
        Variable = var,
        Min = min(.[[var]], na.rm = TRUE),
        `1st Qu` = quantile(.[[var]], probs = 0.25, na.rm = TRUE),
        Median = median(.[[var]], na.rm = TRUE),
        Mean = mean(.[[var]], na.rm = TRUE),
        `3rd Qu` = quantile(.[[var]], probs = 0.75, na.rm = TRUE),
        Max = max(.[[var]], na.rm = TRUE),
        SD = sd(.[[var]], na.rm = TRUE)
      )
    return(summary_df)
  })
}

# Apply the function to TCGA_aug
numeric_summary <- summary_numeric(TCGA_aug)


# Summary statistics for categorial values
# Function to generate a detailed summary for each categorical variable
summary_categorical <- function(df) {
  # Get names of categorical variables
  categorical_vars <- names(select(df, where(is.character)))
  
  # Function to summarize a single categorical variable
  summarize_variable <- function(var_name) {
    var_table <- df %>%
      count(!!sym(var_name)) %>%
      mutate(Percentage = n / sum(n) * 100) %>%
      rename(Level = !!sym(var_name))

    # Add variable name as a column for identification
    var_table$Variable <- var_name
    return(var_table)
  }
  
  # Apply the summarizing function to each categorical variable and combine the results
  map_dfr(categorical_vars, summarize_variable)
}

# Apply the function to TCGA_aug
categorical_summary <- summary_categorical(TCGA_aug[,-1]) # without the sampleID's
```

## Visualization of numerical data

```{r}
#| label: 04-04

num_list <- list()
# Loop through numeric variables and create plots
numeric_vars <- TCGA_aug[,-10] %>% select(where(is.numeric))

for (var in names(numeric_vars)) {
  plot <-
    ggplot(numeric_vars, aes_string(x = var)) +
    geom_histogram(bins = 30, fill = "skyblue", color = "black") +
    labs(title = paste("Histogram of", var), x = var, y = "Frequency") +
    theme_gray(base_size = 9)

  # Save the plot to a file in the 'results' folder
  file_name <- paste0("./../results/04_describe/04_numeric/04_", var, "_histogram.png")
  ggsave(file_name, plot, width = 8, height = 4)
}
```

```{r}
#| label: 04-05

# Create and save the grouped boxplot of age at diagnosis vs cancer type
age_diagnosis_plot <- ggplot(TCGA_aug, aes(x = cancer_type, y = age_diagnosis, fill = cancer_type)) +
  geom_boxplot(show.legend = FALSE) +
  labs(title = "Age at diagnosis across cancer types", x = "Cancer Type", 
       y = "Age at Diagnosis") +
  theme_gray() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("./../results/04_describe/04_numeric/04_age_diagnosis_boxplot.png", age_diagnosis_plot, width = 10, height = 6)


# Create and save the grouped boxplot of disease duration vs cancer type
disease_duration_plot <- ggplot(TCGA_aug, aes(x = cancer_type, y = disease_duration_years, fill = cancer_type)) +
  geom_boxplot(show.legend = FALSE) +
  labs(title = "Disease duration across cancer types", x = "Cancer Type", 
       y = "Disease Duration in Years") +
  theme_gray() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("./../results/04_describe/04_numeric/04_disease_duration_boxplot.png", disease_duration_plot, width = 10, height = 6)
```

## Visualization of categorical data

```{r}
#| label: 04-06

# List to store plots
cat_list <- list()

# Loop through categorical variables and create bar plots
categorical_vars <- TCGA_aug[,-1] %>% select(where(is.character))

for (var in names(categorical_vars)) {
  plot <-
    ggplot(categorical_vars, aes_string(x = var)) +
    geom_bar(fill = "coral", color = "black") +
    labs(title = paste("Bar Plot of", var), x = var, y = "Count") +
    theme_gray(base_size = 9) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

  # Save the plot to a file in the 'results' folder
  file_name <- paste0("./../results/04_describe/04_categorical/04_", var, "_barplot.png")
  ggsave(file_name, plot, width = 8, height = 4)
}
```

```{r}
#| label: 04-07

# Create a grouped bar plot for Gender vs. Cancer Type
gender_cancerType_plot <- ggplot(TCGA_aug, aes(x = cancer_type, fill = gender)) +
  geom_bar(position = "dodge") +
  labs(title = "Distribution of Cancer Types by Gender", x = "Cancer Type", y = "Count") +
  theme_gray(base_size = 9) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability

ggsave("./../results/04_describe/04_categorical/04_gender_cancertype_barplot.png", gender_cancerType_plot, width = 10, height = 6)

# Create a grouped bar plot for Pathologic Stage vs. Cancer Type
stage_cancerType_plot <- ggplot(TCGA_aug, aes(x = cancer_type, fill = stage_group)) +
  geom_bar(position = "dodge") +
  labs(title = "Distribution of Cancer Types by Pathologic Stage", x = "Cancer Type", y = "Count") +
  theme_gray(base_size = 9) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability

ggsave("./../results/04_describe/04_categorical/04_stage_cancertype_barplot.png", stage_cancerType_plot, width = 10, height = 6)
```

## Outliers

```{r}
#| label: 04-08

# Create box plots for numerical variables
#numerical_vars <- c("age_diagnosis", "death_days_to", "age_at_last_followup_years", "disease_duration_years")


# Loop through numeric variables and create box plots
numeric_vars <- TCGA_aug[,-10] %>% select(where(is.numeric))

for (var in names(numeric_vars)) {
  plot <-
    ggplot(TCGA_aug, aes(y = !!sym(var))) +
    geom_boxplot(outlier.colour = "red", outlier.shape = 16, width = 0.5, notch = FALSE) +
    labs(title = paste("Box Plot of", var), y = var) +
    theme_gray(base_size = 9) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

  # Save the plot to a file in the 'results/outliers' folder
  file_name <- paste0("./../results/04_describe/04_outliers/04_", var, "_outliers.png")
  ggsave(file_name, plot, width = 8, height = 4)
}
```

## Correlation analysis and heatmap

```{r}
#| label: 04-09

numerical_vars <- c("age_diagnosis", "death_days_to", "age_at_last_followup_years", "disease_duration_years")

# Calculate correlations for numerical variables
correlations <- cor(select(TCGA_aug, all_of(numerical_vars)))

# Create a heatmap of correlations
cor_melted <- melt(correlations)
corr_plot <- ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  labs(title = "Correlation Heatmap", x = "", y = "") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  theme_gray() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("./../results/04_describe/04_correlation_heatmap.png", corr_plot, width = 10, height = 6)
```
